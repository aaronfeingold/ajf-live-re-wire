name: Build and Deploy ETL Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PG_DATABASE_URL: ${{ secrets.PG_DATABASE_URL }}
      BASE_URL: ${{ secrets.BASE_URL }}
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      REDIS_URL: ${{ secrets.REDIS_URL }}
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Run tests
        run: |
          pipenv run pytest -v tests/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [extractor, loader, cache_manager, param_generator]
    steps:
      - uses: actions/checkout@v3
      - name: Get version from pyproject.toml
        id: version
        run: |
          python -m pip install --upgrade pip
          pip install tomli-w
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push image with semantic version
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fest-vibes-ai-${{ matrix.component }}
          VERSION_TAG: v${{ steps.version.outputs.version }}
        run: |
          # Build and tag the image with version and latest
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f src/${{ matrix.component }}/Dockerfile .

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Get the SHA digest of the pushed image
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG | cut -d'@' -f2)

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "image_digest=$IMAGE_DIGEST" >> $GITHUB_OUTPUT
          echo "image_with_digest=$ECR_REGISTRY/$ECR_REPOSITORY@$IMAGE_DIGEST" >> $GITHUB_OUTPUT

  deploy:
    needs: [test, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: |
          cd terraform/environments/prod
          terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"
      - name: Get deployment version and commit info
        id: deploy_version
        run: |
          python -m pip install --upgrade pip
          pip install tomli-w
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "Deployment version: $VERSION, Commit: ${{ github.sha }}"
      - name: Get image digests from ECR
        id: get_digests
        run: |
          # Get the ECR registry URL
          ECR_REGISTRY=$(aws ecr describe-registry --query 'registryId' --output text).dkr.ecr.us-east-1.amazonaws.com
          VERSION_TAG="v${{ steps.deploy_version.outputs.version }}"

          # Get digests for each component
          PARAM_GENERATOR_DIGEST=$(aws ecr describe-images --repository-name fest-vibes-ai-param_generator --image-ids imageTag=$VERSION_TAG --query 'imageDetails[0].imageDigest' --output text)
          EXTRACTOR_DIGEST=$(aws ecr describe-images --repository-name fest-vibes-ai-extractor --image-ids imageTag=$VERSION_TAG --query 'imageDetails[0].imageDigest' --output text)
          LOADER_DIGEST=$(aws ecr describe-images --repository-name fest-vibes-ai-loader --image-ids imageTag=$VERSION_TAG --query 'imageDetails[0].imageDigest' --output text)
          CACHE_MANAGER_DIGEST=$(aws ecr describe-images --repository-name fest-vibes-ai-cache_manager --image-ids imageTag=$VERSION_TAG --query 'imageDetails[0].imageDigest' --output text)

          echo "param_generator_digest=$PARAM_GENERATOR_DIGEST" >> $GITHUB_OUTPUT
          echo "extractor_digest=$EXTRACTOR_DIGEST" >> $GITHUB_OUTPUT
          echo "loader_digest=$LOADER_DIGEST" >> $GITHUB_OUTPUT
          echo "cache_manager_digest=$CACHE_MANAGER_DIGEST" >> $GITHUB_OUTPUT
      - name: Create terraform.tfvars
        run: |
          cd terraform/environments/prod
          cat > terraform.tfvars << EOF
          database_url = "${{ secrets.PG_DATABASE_URL }}"
          redis_url = "${{ secrets.REDIS_URL }}"
          google_maps_api_key = "${{ secrets.GOOGLE_MAPS_API_KEY }}"
          base_url = "${{ secrets.BASE_URL }}"
          s3_bucket_name = "${{ secrets.S3_BUCKET_NAME }}"
          image_version = "v${{ steps.deploy_version.outputs.version }}"
          param_generator_image_digest = "${{ steps.get_digests.outputs.param_generator_digest }}"
          extractor_image_digest = "${{ steps.get_digests.outputs.extractor_digest }}"
          loader_image_digest = "${{ steps.get_digests.outputs.loader_digest }}"
          cache_manager_image_digest = "${{ steps.get_digests.outputs.cache_manager_digest }}"
          EOF
      - name: Terraform Apply
        run: |
          cd terraform/environments/prod
          terraform apply -auto-approve

  version-and-tag:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bump-my-version tomli-w
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      - name: Bump version and create tags
        run: |
          # Get current version
          CURRENT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "Current version: $CURRENT_VERSION"

          # Bump patch version
          bump-my-version bump patch

          # Get new version
          NEW_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "New version: $NEW_VERSION"

          # Create Git tag and push
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
