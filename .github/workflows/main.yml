name: Build and Deploy ETL Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
        PG_DATABASE_URL: ${{ secrets.PG_DATABASE_URL }}
        BASE_URL: ${{ secrets.BASE_URL }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        REDIS_URL: ${{ secrets.REDIS_URL }}
        GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --dev
      - name: Run tests
        run: |
          pipenv run pytest -v tests/

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [extractor, loader, cache_manager, param_generator]
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fest-vibes-ai-${{ matrix.component }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Check if repository exists, create if it doesn't
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
          # Build and tag the image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f src/${{ matrix.component }}/Dockerfile .
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          # Save the image URI
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: |
          cd terraform/environments/prod
          terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_BACKEND_BUCKET }}" \
          -backend-config="key=prod/terraform.tfstate" \
          -backend-config="region=us-east-1" \
          -backend-config="encrypt=true" \
          -backend-config="use_lockfile=true"
      - name: Create terraform.tfvars
        run: |
          cd terraform/environments/prod
          cat > terraform.tfvars << EOF
          database_url = "${{ secrets.PG_DATABASE_URL }}"
          redis_url = "${{ secrets.REDIS_URL }}"
          google_maps_api_key = "${{ secrets.GOOGLE_MAPS_API_KEY }}"
          base_url = "${{ secrets.BASE_URL }}"
          s3_bucket_name = "${{ secrets.S3_BUCKET_NAME }}"
          EOF
      - name: Terraform Apply
        run: |
          cd terraform/environments/prod
          terraform apply -auto-approve
